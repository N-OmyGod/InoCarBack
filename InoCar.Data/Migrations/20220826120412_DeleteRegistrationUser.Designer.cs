// <auto-generated />
using System;
using InoCar.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InoCar.Data.Migrations
{
    [DbContext(typeof(InoCarContext))]
    [Migration("20220826120412_DeleteRegistrationUser")]
    partial class DeleteRegistrationUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("InoCar.Data.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<string>("Drive")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("EngineType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int?>("RemoveCarReasonId")
                        .HasColumnType("int");

                    b.Property<string>("StateNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("Transmission")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId")
                        .IsUnique();

                    b.HasIndex("RemoveCarReasonId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("InoCar.Data.Entities.CarCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumberCTC")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("SeriaCTC")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CarCertificates");
                });

            modelBuilder.Entity("InoCar.Data.Entities.CarDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CertificateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DaysBeforeTO")
                        .HasColumnType("datetime2");

                    b.Property<string>("IndividualOffers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KmBeforeTO")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastVisitTO")
                        .HasColumnType("datetime2");

                    b.Property<int>("MileageToTO")
                        .HasColumnType("int");

                    b.Property<string>("Recommendations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReminderOfMaintenance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReminderOfTO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceCampaigns")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("WarrantyEndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId")
                        .IsUnique();

                    b.ToTable("CarDetails");
                });

            modelBuilder.Entity("InoCar.Data.Entities.Dealership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.Property<string>("OperatorNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dealerships");
                });

            modelBuilder.Entity("InoCar.Data.Entities.DealershipFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("DealershipId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PointNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 8, 26, 12, 4, 10, 872, DateTimeKind.Utc).AddTicks(3595));

                    b.HasKey("Id");

                    b.HasIndex("DealershipId");

                    b.ToTable("DealershipFeedbacks");
                });

            modelBuilder.Entity("InoCar.Data.Entities.MaintenanceWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ExploitationMonths")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasMaxLength(6)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VisitReasonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitReasonId");

                    b.ToTable("MaintenanceWorks");
                });

            modelBuilder.Entity("InoCar.Data.Entities.MileageLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("WorkTypes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("MileageLevels");
                });

            modelBuilder.Entity("InoCar.Data.Entities.PersonalOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("ActivatedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PersonalOffers");
                });

            modelBuilder.Entity("InoCar.Data.Entities.PersonalOfferServiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PersonalOfferId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonalOfferId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("PersonalOfferServiceRequests");
                });

            modelBuilder.Entity("InoCar.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MaintenanceWorkId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonalOfferId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceWorkId");

                    b.HasIndex("PersonalOfferId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("InoCar.Data.Entities.Recommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("InoCar.Data.Entities.RecommendationServiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RecommendationId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecommendationId");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("RecommendationServiceRequests");
                });

            modelBuilder.Entity("InoCar.Data.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("InoCar.Data.Entities.RemoveCarReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RemoveCarReasons");
                });

            modelBuilder.Entity("InoCar.Data.Entities.ResetPasswordCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ResetPasswordCodes");
                });

            modelBuilder.Entity("InoCar.Data.Entities.ServiceConsultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DealershipId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DealershipId");

                    b.ToTable("ServiceConsultants");
                });

            modelBuilder.Entity("InoCar.Data.Entities.ServiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreateRequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 8, 26, 15, 4, 10, 868, DateTimeKind.Local).AddTicks(8020));

                    b.Property<int>("DealershipId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequestConfirm")
                        .HasColumnType("bit");

                    b.Property<int?>("Mileage")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PersonalOfferServiceRequestId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PersonalOffersPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RecommendationServiceRequestId")
                        .HasColumnType("int");

                    b.Property<decimal?>("RecommendationsPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RequestPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RequestType")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceConsultantId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("TimeSlotId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VisitReasonId")
                        .HasColumnType("int");

                    b.Property<decimal>("VisitReasonPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("DealershipId");

                    b.HasIndex("ServiceConsultantId");

                    b.HasIndex("TimeSlotId");

                    b.HasIndex("UserId");

                    b.HasIndex("VisitReasonId");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("InoCar.Data.Entities.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceConsultantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServiceConsultantId");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("InoCar.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RegistrationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ce539a1a-8b50-4d0b-9b63-01870d916534",
                            AccessFailedCount = 0,
                            City = "Admin1",
                            ConcurrencyStamp = "21087e1e-8ebd-4265-9dba-5d5ab83c2fc4",
                            DateBirth = new DateTime(2022, 8, 26, 12, 4, 11, 51, DateTimeKind.Utc).AddTicks(918),
                            Email = "John-old@mail.ru",
                            EmailConfirmed = true,
                            FirstName = "Admin1",
                            IsDeleted = false,
                            LastName = "Admin1",
                            LockoutEnabled = false,
                            PasswordHash = "$2a$11$fSsnGRqPEZk4si9S8euLV.EgNFa5fswzu7Uosyc1GRXn.OyvT6wlO",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b70fe409-e11a-4d8a-87b2-c51402f4e0b0",
                            TwoFactorEnabled = false,
                            UserName = "Admin1"
                        });
                });

            modelBuilder.Entity("InoCar.Data.Entities.VisitReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("VisitReasons");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("InoCar.Data.Entities.Car", b =>
                {
                    b.HasOne("InoCar.Data.Entities.CarCertificate", "CarCertificate")
                        .WithOne("Car")
                        .HasForeignKey("InoCar.Data.Entities.Car", "CertificateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InoCar.Data.Entities.RemoveCarReason", "RemoveCarReason")
                        .WithMany("Cars")
                        .HasForeignKey("RemoveCarReasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CarCertificate");

                    b.Navigation("RemoveCarReason");
                });

            modelBuilder.Entity("InoCar.Data.Entities.CarCertificate", b =>
                {
                    b.HasOne("InoCar.Data.Entities.User", "User")
                        .WithMany("CarCertificates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InoCar.Data.Entities.CarDetails", b =>
                {
                    b.HasOne("InoCar.Data.Entities.CarCertificate", "CarCertificate")
                        .WithOne("CarDetails")
                        .HasForeignKey("InoCar.Data.Entities.CarDetails", "CertificateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CarCertificate");
                });

            modelBuilder.Entity("InoCar.Data.Entities.DealershipFeedback", b =>
                {
                    b.HasOne("InoCar.Data.Entities.Dealership", "Dealership")
                        .WithMany("DealershipFeedbacks")
                        .HasForeignKey("DealershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dealership");
                });

            modelBuilder.Entity("InoCar.Data.Entities.MaintenanceWork", b =>
                {
                    b.HasOne("InoCar.Data.Entities.VisitReason", "VisitReason")
                        .WithMany("MaintenanceWorks")
                        .HasForeignKey("VisitReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisitReason");
                });

            modelBuilder.Entity("InoCar.Data.Entities.MileageLevel", b =>
                {
                    b.HasOne("InoCar.Data.Entities.Product", "Product")
                        .WithMany("MileageLevels")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InoCar.Data.Entities.PersonalOfferServiceRequest", b =>
                {
                    b.HasOne("InoCar.Data.Entities.PersonalOffer", "PersonalOffer")
                        .WithMany("PersonalOfferServiceRequests")
                        .HasForeignKey("PersonalOfferId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InoCar.Data.Entities.ServiceRequest", "ServiceRequest")
                        .WithMany("PersonalOfferServiceRequests")
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PersonalOffer");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("InoCar.Data.Entities.Product", b =>
                {
                    b.HasOne("InoCar.Data.Entities.MaintenanceWork", "MaintenanceWork")
                        .WithMany("Products")
                        .HasForeignKey("MaintenanceWorkId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InoCar.Data.Entities.PersonalOffer", "PersonalOffer")
                        .WithMany("Products")
                        .HasForeignKey("PersonalOfferId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MaintenanceWork");

                    b.Navigation("PersonalOffer");
                });

            modelBuilder.Entity("InoCar.Data.Entities.RecommendationServiceRequest", b =>
                {
                    b.HasOne("InoCar.Data.Entities.Recommendation", "Recommendation")
                        .WithMany("RecommendationServiceRequests")
                        .HasForeignKey("RecommendationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InoCar.Data.Entities.ServiceRequest", "ServiceRequest")
                        .WithMany("RecommendationServiceRequests")
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recommendation");

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("InoCar.Data.Entities.RefreshToken", b =>
                {
                    b.HasOne("InoCar.Data.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InoCar.Data.Entities.ResetPasswordCode", b =>
                {
                    b.HasOne("InoCar.Data.Entities.User", "User")
                        .WithMany("ResetPasswordCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("InoCar.Data.Entities.ServiceConsultant", b =>
                {
                    b.HasOne("InoCar.Data.Entities.Dealership", "Dealership")
                        .WithMany("ServiceConsultants")
                        .HasForeignKey("DealershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dealership");
                });

            modelBuilder.Entity("InoCar.Data.Entities.ServiceRequest", b =>
                {
                    b.HasOne("InoCar.Data.Entities.Car", "Car")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InoCar.Data.Entities.Dealership", "Dealership")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("DealershipId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InoCar.Data.Entities.ServiceConsultant", "ServiceConsultant")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ServiceConsultantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InoCar.Data.Entities.TimeSlot", "TimeSlot")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InoCar.Data.Entities.User", "User")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InoCar.Data.Entities.VisitReason", "VisitReason")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("VisitReasonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Dealership");

                    b.Navigation("ServiceConsultant");

                    b.Navigation("TimeSlot");

                    b.Navigation("User");

                    b.Navigation("VisitReason");
                });

            modelBuilder.Entity("InoCar.Data.Entities.TimeSlot", b =>
                {
                    b.HasOne("InoCar.Data.Entities.ServiceConsultant", "ServiceConsultant")
                        .WithMany("TimeSlots")
                        .HasForeignKey("ServiceConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceConsultant");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InoCar.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InoCar.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InoCar.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InoCar.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InoCar.Data.Entities.Car", b =>
                {
                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("InoCar.Data.Entities.CarCertificate", b =>
                {
                    b.Navigation("Car")
                        .IsRequired();

                    b.Navigation("CarDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("InoCar.Data.Entities.Dealership", b =>
                {
                    b.Navigation("DealershipFeedbacks");

                    b.Navigation("ServiceConsultants");

                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("InoCar.Data.Entities.MaintenanceWork", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("InoCar.Data.Entities.PersonalOffer", b =>
                {
                    b.Navigation("PersonalOfferServiceRequests");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("InoCar.Data.Entities.Product", b =>
                {
                    b.Navigation("MileageLevels");
                });

            modelBuilder.Entity("InoCar.Data.Entities.Recommendation", b =>
                {
                    b.Navigation("RecommendationServiceRequests");
                });

            modelBuilder.Entity("InoCar.Data.Entities.RemoveCarReason", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("InoCar.Data.Entities.ServiceConsultant", b =>
                {
                    b.Navigation("ServiceRequests");

                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("InoCar.Data.Entities.ServiceRequest", b =>
                {
                    b.Navigation("PersonalOfferServiceRequests");

                    b.Navigation("RecommendationServiceRequests");
                });

            modelBuilder.Entity("InoCar.Data.Entities.TimeSlot", b =>
                {
                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("InoCar.Data.Entities.User", b =>
                {
                    b.Navigation("CarCertificates");

                    b.Navigation("RefreshTokens");

                    b.Navigation("ResetPasswordCodes");

                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("InoCar.Data.Entities.VisitReason", b =>
                {
                    b.Navigation("MaintenanceWorks");

                    b.Navigation("ServiceRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
